package com.communityfix.controller.citizen;

import com.communityfix.dao.CategoryDAO;
import com.communityfix.model.Category;
import com.communityfix.model.Issue;
import com.communityfix.model.User;
import com.communityfix.service.IssueService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

@WebServlet(name = "ReportNewIssueServlet", value = "/ReportNewIssueServlet")
@MultipartConfig(
        fileSizeThreshold = 1024 * 1024 * 2, // 2MB
        maxFileSize = 1024 * 1024 * 10,      // 10MB
        maxRequestSize = 1024 * 1024 * 50)   // 50MB
public class ReportNewIssueServlet extends HttpServlet {
    private static final Logger LOGGER = Logger.getLogger(ReportNewIssueServlet.class.getName());
    private final IssueService issueService = new IssueService();
    private final CategoryDAO categoryDAO = new CategoryDAO();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User loggedInUser = (User) request.getSession().getAttribute("user");
        if (loggedInUser == null || loggedInUser.getRole() != User.Role.CITIZEN) {
            response.sendRedirect(request.getContextPath() + "/LoginServlet");
            return;
        }

        try {
            List<Category> categories = categoryDAO.getAllCategories();
            request.setAttribute("categories", categories);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error loading categories", e);
            request.setAttribute("errorMessage", "Error loading categories: " + e.getMessage());
        }

        request.getRequestDispatcher("WEB-INF/view/citizen/reportIssue.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User loggedInUser = (User) request.getSession().getAttribute("user");
        if (loggedInUser == null || loggedInUser.getRole() != User.Role.CITIZEN) {
            response.sendRedirect(request.getContextPath() + "/LoginServlet");
            return;
        }

        try {
            // Get form data
            int categoryId;
            try {
                categoryId = Integer.parseInt(request.getParameter("categoryId"));
            } catch (NumberFormatException e) {
                throw new IllegalArgumentException("Invalid category selected.");
            }

            // Validate categoryId exists
            boolean categoryExists = false;
            List<Category> categories = categoryDAO.getAllCategories();
            for (Category category : categories) {
                if (category.getCategoryId() == categoryId) {
                    categoryExists = true;
                    break;
                }
            }
            if (!categoryExists) {
                throw new IllegalArgumentException("Selected category does not exist.");
            }

            String description = request.getParameter("description");

            // Validate description
            if (description == null || description.trim().isEmpty() || description.length() > 500) {
                throw new IllegalArgumentException("Description must be between 1 and 500 characters.");
            }

            // Handle file upload
            byte[] imageBytes = null;
            Part imagePart = request.getPart("image");
            if (imagePart != null && imagePart.getSize() > 0) {
                imageBytes = imagePart.getInputStream().readAllBytes();
            }

            // Create new issue
            Issue issue = new Issue(
                    0, // issueId (auto-generated by DB)
                    loggedInUser.getUserId(),
                    categoryId,
                    null, // categoryName (not needed for creation)
                    description,
                    imageBytes,
                    "Pending", // Default status
                    null // No admin comment initially
            );

            // Save to database
            issueService.createIssue(issue);
            request.setAttribute("successMessage", "Issue reported successfully!");

        } catch (IllegalArgumentException e) {
            request.setAttribute("errorMessage", e.getMessage());
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database error while reporting issue", e);
            request.setAttribute("errorMessage", "Database error: Unable to report issue. Please try again later. Details: " + e.getMessage());
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, "Unexpected error while reporting issue", e);
            request.setAttribute("errorMessage", "Unexpected error: " + e.getMessage());
        }

        // Reload categories and forward back to the form
        try {
            List<Category> categories = categoryDAO.getAllCategories();
            request.setAttribute("categories", categories);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Error loading categories", e);
            request.setAttribute("errorMessage", "Error loading categories: " + e.getMessage());
        }

        request.getRequestDispatcher("WEB-INF/view/citizen/reportIssue.jsp").forward(request, response);
    }
}